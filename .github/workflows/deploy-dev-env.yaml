---
name: ðŸ“¦ðŸš€ Create Dev Environment

on:
  workflow_call:
    inputs:
      DEV-ENV-NAME:
        description: Dev Environment Name
        required: true
        type: string
      MANIFESTS_PATH:
        required: true
        type: string
        default: .k8s/environments/dev/
      DOMAIN:
        required: true
        type: string
      TASK:
        description: Task name or task url
        required: false
        type: string
    secrets:
      KUBE_CONFIG_DEV:
        required: true

env:
  DOCKER_IMAGE: "ghcr.io/${{ github.repository }}"
  SH8: $(echo ${GITHUB_SHA} | cut -c1-8)
  DEV_STACK_TTL: "1d"
  PROJECT_NAME: studos
  STACK_NAME: "dev-${{ github.event.inputs.DEV-ENV-NAME }}"
concurrency:
  group: dev-${{ github.event.inputs.DEV-ENV-NAME }}
  cancel-in-progress: true

jobs:
  validate-stack-name:
    name: validate-stack-name
    runs-on: ubuntu-latest
    steps:
      - name: Get short commit and stack name
        run: |
          echo "SH8=$(echo ${{ env.SH8 }})" >> $GITHUB_ENV
          echo "STACK_NAME=$(echo ${{ env.STACK_NAME }}| tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "APP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Verify stack name
        run: |
          if [[ $STACK_NAME == *['!'@#\$%^\&*()_+]* ]] || [[ $STACK_NAME == *"$APP_NAME"* ]] || [[ $STACK_NAME == *"$PROJECT_NAME"* ]] || [[ $STACK_NAME == *[A-Z]* ]] || [[ $STACK_NAME == *" "* ]]
          then
            echo "Stack name contains invalid characters"
            echo "Only allowed Alpha numeric lowercase and hyphen, app-name or project is not allowed"
            echo "This stack name is: $STACK_NAME"
            exit 1
          fi

  deploy-dev:
    env:
      STAGE: dev
    environment:
      name: dev
      url: https://${{ env.APP_NAME }}-${{ env.STACK_NAME }}.${{ github.event.inputs.DOMAIN }}
    name: deploy-dev
    runs-on: self-hosted
    needs: validate-stack-name
    steps:
      - run: |
          echo "APP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
          echo "SH8=$(echo ${{ env.SH8 }})" >> $GITHUB_ENV
          echo "STACK_NAME=$(echo ${{ env.STACK_NAME }}| tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "DEV_STACK_TTL=$(echo ${{ env.DEV_STACK_TTL }})" >> $GITHUB_ENV
        name: Get short commit

      - name: Check out code
        uses: actions/checkout@v2

      - uses: azure/setup-kubectl@v1
        id: install

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: 3.8.8

      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}  # Use secret (https://developer.github.com/actions/managing-workflows/storing-secrets/)
          context: yros-cloud  # If left unspecified, current-context from kubeconfig is used as default
        id: set-staging-context

      - uses: actions/setup-python@v2
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            kubesplit
      - name: Setup yq
        uses: chrisdickinson/setup-yq@latest

      - name: Deploy Dev Stack
        run: |
          # Dev Stack deploy

           if [[ ! $STACK_NAME ]]; then
             echo "STACK NAME is not defined"
             exit 1
           else
             echo "STACK_NAME is $STACK_NAME"
           fi
             kubectl create namespace $STACK_NAME || true
             kubectl label ns $STACK_NAME stack-type=dev --overwrite
             kubectl label ns $STACK_NAME janitor/ttl=$DEV_STACK_TTL --overwrite
             kubectl label ns $STACK_NAME developer=${{ github.actor }} --overwrite
             kubectl config set-context --current --namespace=$STACK_NAME
             cd ${{ github.event.inputs.MANIFESTS_PATH }}
             set -x
             kustomize build|sed "s/STACK_NAME/$STACK_NAME/g"|sed "s/DOCKER_TAG/$SH8/g"|kubectl apply -f -
             set +x
           if [ "$?" -ne "0" ];then
             echo Stack build failed!
             exit 1
           else
             kustomize build|sed "s/STACK_NAME/$STACK_NAME/g"|kubesplit -o .
             for yaml in `ls $STACK_NAME`; do
               if head -8 $STACK_NAME/$yaml|grep -q "kind: Deployment"; then
                 printf "${NC}"
                 MANIFEST_APP_NAME=$(yq r $STACK_NAME/$yaml metadata.name)
                 kubectl rollout status deployment $MANIFEST_APP_NAME || exit 1
                 printf "\n\n${GREEN}The $MANIFEST_APP_NAME deployed successfully on $STACK_NAME environment\n\n${YELLOW}"
               fi
             done
             echo "Removing temp files!"
             rm -rf $STACK_NAME||exit 1
             printf "\n\n${RED}Your MY-STACK TTL is $DEV_STACK_TTL\n"
             echo Stack build success!
             echo "Stack URL: https://`kubectl get ingress|grep $APP_NAME|awk '{print $3}'`"
           fi